#include <iostream>
 
using namespace std;

int main(int argc, char** argv)
{
    string a,b,c,d,r,dw,l;
    cin>>a>>b>>c>>d;
    cout<<a<<endl;
    if(a[a.length()-1]==b[0])
    {
        r=b;
    }
    else if(a[a.length()-1]==c[0])
    {
        r=c;
    }
    else
    {
        r=d;
    }
    if(r[r.length()-1]==b[0])
    {
        dw=b;
    }
    else if(r[r.length()-1]==c[0])
    {
        dw=c;
    }
    else
    {
        dw=d;
    }
    if(dw[d.length()-1]==b[0])
    {
        l=b;
    }
    else if(dw[dw.length()-1]==c[0])
    {
        l=c;
    }
    else
    {
        l=d;
    }
    int i,j,k,m,n;
    k=l.length()-2;
    n=1;
    for(i=1; i<l.length()-1; ++i)
    {
        for(j=0; j<a.length(); ++j)
        {
            if(j==0)
            {
                cout<<l[k]; 
                --k;
            }
            else if(j==a.length()-1)
            {
                cout<<r[n];
                ++n;
            }
            else
            {
                cout<<"*";
            }
        }
        cout<<endl;
    }
    for(i=dw.length()-1; i>=0; --i)
    {
        cout<<dw[i];
    }
}


Question:

Four strings all having the same length L are passed as the input to the program. The four strings must be printed in a L*L square matrix 
shape as shown in the example input/output. The string which is on the top will always be the first string in the input. 
Other three strings can occur in a random order in the input. The sequence of the string can be identified by the fact that the last letter
of a string will be the first letter of another string (and you can safely assume the last letter will not occur more than once). 

Input Format: 
The first line contains the string which represents the top of the square matrix. 
The next three lines will contain the remaining the three string values which can represent the right, left and bottom side of the squares,
but not necessarily in the same order. 

Output Format: 
The L*L square matrix with these four strings as it's sides as described in the Example Input/Output. 

Boundary Conditions: 
3 <= L <= 100 

Example Input/Output 1: 

Input: 

TIGER 
YACHT 
RANGE 
EVERY 

Output: 
TIGER 
H***A 
C***N 
A***G 
YREVE 

Example Input/Output 2: 

Input: 
MAN 
DOT
NOD
TIM 

Output: 

MAN 
I*O 
TOD
